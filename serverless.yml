service: serverless-challenge

frameworkVersion: ">=1.1.0"

provider:
  name: aws
  runtime: python3.7
  profile: administrator
  region: us-east-1
  package:
    exclude:
      - node_modules/**
      - venv/**
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    pythonBin: python3
    noDeploy: []
    strip: false
    zip: true
    layer: true

functions:
  extractMetadata:
    handler: handler.extract_metadata
    description: lambda function
    memorySize: 128
    timeout: 30
    events:
      - s3:
          bucket: solvimmimagebucket1
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
  getMetadata:
    handler: handler.get_metadata
    description: lambda function
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: images/{s3objectkey}
          method: get
          cors: true

resources:
  Resources:
    ImagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: s3objectkey
            AttributeType: S
        KeySchema:
          -
            AttributeName: s3objectkey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
